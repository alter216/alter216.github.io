---
import fs from 'node:fs';
import path from 'node:path';
import { getImage } from 'astro:assets';
import PhotoCaption from './PhotoCaption.astro';

interface Props {
  collection: string;
}

const { collection } = Astro.props;

// Get the photos directory path (everything is now in public)
const publicDir = path.join(process.cwd(), 'public/photos', collection);

// Ensure public directory exists
fs.mkdirSync(publicDir, { recursive: true });

// Read the public directory for both markdown and images
let publicFiles: string[] = [];
try {
  publicFiles = fs.readdirSync(publicDir);
} catch (error) {
  // Directory might not exist yet, but we've just tried to create it
  throw new Error(`Could not read directory for collection: ${collection}`);
}

// Find the markdown file
const mdFile = publicFiles.find(file => file.endsWith('.md'));

if (!mdFile) {
  throw new Error(`No markdown file found in collection: ${collection}`);
}

// Read the markdown file for the alt text (first line)
const filePath = path.join(publicDir, mdFile);
const fileContents = fs.readFileSync(filePath, 'utf8');
const firstLine = fileContents.split('\n')[0] || 'Photo';

// Find image in public directory
const imageFile: string | undefined = publicFiles.find(file => 
  file.endsWith('.png') || file.endsWith('.jpg') || file.endsWith('.jpeg')
);

if (!imageFile) {
  throw new Error(`No image found in collection: ${collection}`);
}

// Create path to image in public directory
const publicImagePath = `/photos/${collection}/${imageFile}`;

// Generate multiple image sizes for responsive loading
const smallImage = await getImage({
  src: publicImagePath,
  width: 400,
  height: 300,
  format: 'webp',
  quality: 80
});

const mediumImage = await getImage({
  src: publicImagePath,
  width: 800,
  height: 600, 
  format: 'webp',
  quality: 80
});

const largeImage = await getImage({
  src: publicImagePath,
  width: 1200,
  height: 900,
  format: 'webp',
  quality: 80
});

// Create a placeholder for fast loading
const placeholderImage = await getImage({
  src: publicImagePath,
  width: 20,
  height: 15,
  format: 'webp',
  quality: 30
});
---

<div class="max-w-4xl mx-auto p-4 text-center">
  <h2 class="text-muted-text dark:text-dark-muted-text mb-3 text-lg font-bold">
    Today's Featured Image
  </h2>
  <div class="relative w-1/2 aspect-[4/3] mb-4 mx-auto">
    <!-- Placeholder image for instant loading -->
    <div class="absolute inset-0 blur-sm transition-opacity duration-500" 
         style={`background-image: url(${placeholderImage.src}); background-size: cover; background-position: center;`}>
    </div>
    
    <!-- Responsive image with multiple sizes -->
    <img
      src={mediumImage.src}
      srcset={`${smallImage.src} 400w, ${mediumImage.src} 800w, ${largeImage.src} 1200w`}
      sizes="(max-width: 600px) 400px, (max-width: 1200px) 800px, 1200px"
      alt={firstLine}
      width={mediumImage.attributes.width}
      height={mediumImage.attributes.height}
      class="object-contain w-full h-full relative z-10"
      loading="eager"
      decoding="async"
      onload="this.previousElementSibling.style.opacity = 0;"
    />
  </div>
  <PhotoCaption collection={collection} mdFile={mdFile} />
</div>